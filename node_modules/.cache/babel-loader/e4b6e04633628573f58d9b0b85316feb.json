{"ast":null,"code":"import _objectSpread from \"D:\\\\react-admin-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\n/**\n *\n * @param  {Array} userRouter 后台返回的用户权限json\n * @param  {Array} allRouter  前端配置好的所有动态路由的集合\n * @return {Array} realRoutes 过滤后的路由\n */\n//根据后台数据筛选出路由表\nexport function recursionRouter(userRouter = [], allRouter = []) {\n  const realRoutes = allRouter.filter(item => userRouter.includes(item.pathName)).map(item => _objectSpread({}, item, {\n    children: item.children ? recursionRouter(userRouter, item.children) : null\n  }));\n  return realRoutes;\n} //重定向到children的第一个路由\n\nexport function recursionRouterTwo(userRouter = [], allRouter = []) {\n  const realRoutes = allRouter.filter(item => userRouter.includes(item.path)).map(item => {\n    return _objectSpread({}, item, {\n      redirect: item.children ? item.children[0].path : null,\n      children: item.children ? recursionRouterTwo(userRouter, item.children) : null\n    });\n  });\n  return realRoutes;\n}\nexport function recursionRouterThree(userRouter = [], allRouter = []) {\n  let list = [];\n  allRouter.forEach((item, index) => {\n    if (item.path === userRouter[0]) {\n      list.push(item);\n    }\n  });\n  return list;\n}","map":{"version":3,"sources":["D:\\react-admin-master\\src\\utils\\recursion-router.js"],"names":["recursionRouter","userRouter","allRouter","realRoutes","filter","item","includes","pathName","map","children","recursionRouterTwo","path","redirect","recursionRouterThree","list","forEach","index","push"],"mappings":";;AAAA;;;;;;AAOC;AACA,OAAO,SAASA,eAAT,CAAyBC,UAAU,GAAG,EAAtC,EAA0CC,SAAS,GAAG,EAAtD,EAA0D;AAC9D,QAAMC,UAAU,GAAGD,SAAS,CACvBE,MADc,CACPC,IAAI,IAAIJ,UAAU,CAACK,QAAX,CAAoBD,IAAI,CAACE,QAAzB,CADD,EAEdC,GAFc,CAEVH,IAAI,sBACFA,IADE;AAELI,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,GACJT,eAAe,CAACC,UAAD,EAAaI,IAAI,CAACI,QAAlB,CADX,GAEJ;AAJD,IAFM,CAAnB;AAQA,SAAON,UAAP;AACH,C,CAED;;AACA,OAAO,SAASO,kBAAT,CAA4BT,UAAU,GAAG,EAAzC,EAA6CC,SAAS,GAAG,EAAzD,EAA6D;AAChE,QAAMC,UAAU,GAAGD,SAAS,CACvBE,MADc,CACPC,IAAI,IAAIJ,UAAU,CAACK,QAAX,CAAoBD,IAAI,CAACM,IAAzB,CADD,EAEdH,GAFc,CAEVH,IAAI,IAAG;AACR,6BACOA,IADP;AAEIO,MAAAA,QAAQ,EAACP,IAAI,CAACI,QAAL,GAAcJ,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBE,IAA/B,GAAoC,IAFjD;AAGIF,MAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,GACJC,kBAAkB,CAACT,UAAD,EAAaI,IAAI,CAACI,QAAlB,CADd,GAEJ;AALV;AAOH,GAVc,CAAnB;AAWA,SAAON,UAAP;AAEH;AAED,OAAO,SAASU,oBAAT,CAA8BZ,UAAU,GAAG,EAA3C,EAA+CC,SAAS,GAAG,EAA3D,EAA+D;AAClE,MAAIY,IAAI,GAAG,EAAX;AACAZ,EAAAA,SAAS,CAACa,OAAV,CAAkB,CAACV,IAAD,EAAMW,KAAN,KAAe;AAC7B,QAAGX,IAAI,CAACM,IAAL,KAAcV,UAAU,CAAC,CAAD,CAA3B,EAA+B;AAC3Ba,MAAAA,IAAI,CAACG,IAAL,CAAUZ,IAAV;AACH;AACJ,GAJD;AAKA,SAAOS,IAAP;AAIH","sourcesContent":["/**\n *\n * @param  {Array} userRouter 后台返回的用户权限json\n * @param  {Array} allRouter  前端配置好的所有动态路由的集合\n * @return {Array} realRoutes 过滤后的路由\n */\n\n //根据后台数据筛选出路由表\n export function recursionRouter(userRouter = [], allRouter = []) {\n    const realRoutes = allRouter\n        .filter(item => userRouter.includes(item.pathName))\n        .map(item => ({\n            ...item,\n            children: item.children\n                ? recursionRouter(userRouter, item.children)\n                : null\n        }))\n    return realRoutes\n}\n\n//重定向到children的第一个路由\nexport function recursionRouterTwo(userRouter = [], allRouter = []) {\n    const realRoutes = allRouter\n        .filter(item => userRouter.includes(item.path))\n        .map(item =>{\n            return {\n                ...item,\n                redirect:item.children?item.children[0].path:null,\n                children: item.children\n                    ? recursionRouterTwo(userRouter, item.children)\n                    : null\n            }\n        })\n    return realRoutes\n\n}\n\nexport function recursionRouterThree(userRouter = [], allRouter = []) {\n    let list = []\n    allRouter.forEach((item,index) =>{\n        if(item.path === userRouter[0]){\n            list.push(item)\n        }\n    })\n    return list\n\n    \n    \n}"]},"metadata":{},"sourceType":"module"}